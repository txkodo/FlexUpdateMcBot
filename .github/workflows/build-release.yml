name: Build and Release

on:
  workflow_dispatch:
    inputs:
      mc_version:
        description: 'Minecraft version to build'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check version directory
      run: |
        MC_VERSION="${{ inputs.mc_version }}"
        if [ ! -d "versions/$MC_VERSION" ]; then
          echo "Version directory versions/$MC_VERSION does not exist"
          exit 1
        fi
    
    - name: Create or get release
      run: |
        MC_VERSION="${{ inputs.mc_version }}"
        # Check if release exists, create if not
        if ! gh release view "v$MC_VERSION" >/dev/null 2>&1; then
          gh release create "v$MC_VERSION" \
            --title "Minecraft $MC_VERSION Bot" \
            --notes "Automated bot build for Minecraft $MC_VERSION"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: flex-update-mc-bot
            platform: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: flex-update-mc-bot
            platform: linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: flex-update-mc-bot.exe
            platform: windows-x64
            ext: .exe
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: flex-update-mc-bot.exe
            platform: windows-arm64
            ext: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: flex-update-mc-bot
            platform: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: flex-update-mc-bot
            platform: macos-arm64
    
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Read rust toolchain
      id: toolchain
      run: echo "toolchain=$(cat "versions/${{ inputs.mc_version }}/rust-toolchain")" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ steps.toolchain.outputs.toolchain }}
        targets: ${{ matrix.target }}
    
    - name: Setup cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Build
      run: |
        cd "versions/${{ inputs.mc_version }}"
        
        # Build with the specified target
        cargo build --release --target ${{ matrix.target }}
        
        # Set asset name with MC version
        ASSET_NAME="flex-update-mc-bot-${{ inputs.mc_version }}-${{ matrix.platform }}${{ matrix.ext }}"
        
        # Copy the built binary to workspace root
        cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "../../$ASSET_NAME"
      shell: bash
    
    - name: Upload to release
      run: |
        ASSET_NAME="flex-update-mc-bot-${{ inputs.mc_version }}-${{ matrix.platform }}${{ matrix.ext }}"
        gh release upload "v${{ inputs.mc_version }}" "$ASSET_NAME" --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: flex-update-mc-bot-${{ inputs.mc_version }}-${{ matrix.platform }}${{ matrix.ext }}
        path: flex-update-mc-bot-${{ inputs.mc_version }}-${{ matrix.platform }}${{ matrix.ext }}
