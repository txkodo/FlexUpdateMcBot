name: Build and Release

on:
  push:
    branches: [ legacy-build ]

permissions:
  contents: write

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      mc_version: ${{ steps.mc-version.outputs.mc_version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get Minecraft version
      id: mc-version
      run: |
        # Extract MC version from bot/Cargo.toml metadata
        cd bot
        MC_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].metadata.mc_version // "unknown"')
        echo "mc_version=${MC_VERSION}" >> $GITHUB_OUTPUT

  build:
    needs: get-version
    strategy:
      matrix: 
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, arm64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macos-latest
            target_os: macos
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    
    - name: Install cross-compilation tools
      if: matrix.target_os == 'linux' && matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
    
    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Build
      run: |
        # Use the Rust build tool with simplified parameters
        cargo run --bin build-bot -p tools -- --os ${{ matrix.target_os }} --arch ${{ matrix.arch }} --output-dir artifacts
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: flex-update-mc-bot-${{ matrix.target_os }}-${{ matrix.arch }}
        path: artifacts/
        retention-days: 7

  release:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: 'flex-update-mc-bot-*'
        path: artifacts/
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        echo "Listing artifacts directory:"
        find artifacts/ -type f -name "*" | head -20
        
        # Process each artifact directory
        for artifact_dir in artifacts/*/; do
          if [ -d "$artifact_dir" ]; then
            artifact_name=$(basename "$artifact_dir")
            echo "Processing artifact: $artifact_name"
            
            # List files in this artifact directory
            echo "Files in $artifact_dir:"
            ls -la "$artifact_dir"
            
            # Find all binary files in the artifact directory
            find "$artifact_dir" -name "flex-update-mc-bot*" -type f | while read -r binary_file; do
              echo "Found binary: $binary_file"
              # Just copy the file with its original name structure
              cp "$binary_file" "release-assets/"
            done
          fi
        done
        
        echo "Release assets prepared:"
        ls -la release-assets/
    
    - name: Check if release exists
      id: check-release
      run: |
        if gh release view "mc-${{ needs.get-version.outputs.mc_version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create or update release
      run: |
        # Check if we have any assets to upload
        if [ ! -d "release-assets" ] || [ -z "$(ls -A release-assets)" ]; then
          echo "No release assets found to upload"
          exit 1
        fi
        
        echo "Assets to upload:"
        ls -la release-assets/
        
        echo "Using MC version: ${{ needs.get-version.outputs.mc_version }}"
        
        if [ "${{ steps.check-release.outputs.exists }}" = "true" ]; then
          echo "Release exists, updating..."
          gh release upload "mc-${{ needs.get-version.outputs.mc_version }}" release-assets/* --clobber
        else
          echo "Creating new release..."
          gh release create "mc-${{ needs.get-version.outputs.mc_version }}" \
            --title "Minecraft ${{ needs.get-version.outputs.mc_version }} Build" \
            --notes "Automated build for Minecraft version ${{ needs.get-version.outputs.mc_version }}" \
            release-assets/*
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}