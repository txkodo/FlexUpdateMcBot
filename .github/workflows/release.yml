name: Release

on:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Build workflow run ID to use'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get target run ID
      id: target-run
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "run_id=${{ github.event.inputs.run_id }}" >> $GITHUB_OUTPUT
        else
          echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Debug workflow info
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Target run ID: ${{ steps.target-run.outputs.run_id }}"
        echo "Input run ID: ${{ github.event.inputs.run_id }}"
        echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
        echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
    
    - name: Get Minecraft version
      id: mc-version
      run: |
        # Extract MC version from bot/Cargo.toml metadata
        cd bot
        MC_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].metadata.mc_version // "unknown"')
        echo "mc_version=${MC_VERSION}" >> $GITHUB_OUTPUT
    
    - name: List available artifacts
      run: |
        echo "Listing artifacts for workflow run ${{ steps.target-run.outputs.run_id }}:"
        gh api repos/${{ github.repository }}/actions/runs/${{ steps.target-run.outputs.run_id }}/artifacts --jq '.artifacts[] | {name: .name, id: .id}'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: 'flex-update-mc-bot-*'
        path: artifacts/
        run-id: ${{ steps.target-run.outputs.run_id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        echo "Listing artifacts directory:"
        find artifacts/ -type f -name "*" | head -20
        
        # Process each artifact directory
        for artifact_dir in artifacts/*/; do
          if [ -d "$artifact_dir" ]; then
            artifact_name=$(basename "$artifact_dir")
            echo "Processing artifact: $artifact_name"
            
            # List files in this artifact directory
            echo "Files in $artifact_dir:"
            ls -la "$artifact_dir"
            
            # Find all binary files in the artifact directory
            find "$artifact_dir" -name "flex-update-mc-bot*" -type f | while read -r binary_file; do
              echo "Found binary: $binary_file"
              # Just copy the file with its original name structure
              cp "$binary_file" "release-assets/"
            done
          fi
        done
        
        echo "Release assets prepared:"
        ls -la release-assets/
    
    - name: Check if release exists
      id: check-release
      run: |
        if gh release view "mc-${{ steps.mc-version.outputs.mc_version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create or update release
      run: |
        # Check if we have any assets to upload
        if [ ! -d "release-assets" ] || [ -z "$(ls -A release-assets)" ]; then
          echo "No release assets found to upload"
          exit 1
        fi
        
        echo "Assets to upload:"
        ls -la release-assets/
        
        if [ "${{ steps.check-release.outputs.exists }}" = "true" ]; then
          echo "Release exists, updating..."
          gh release upload "mc-${{ steps.mc-version.outputs.mc_version }}" release-assets/* --clobber
        else
          echo "Creating new release..."
          gh release create "mc-${{ steps.mc-version.outputs.mc_version }}" \
            --title "Minecraft ${{ steps.mc-version.outputs.mc_version }} Build" \
            --notes "Automated build for Minecraft version ${{ steps.mc-version.outputs.mc_version }}" \
            release-assets/*
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}